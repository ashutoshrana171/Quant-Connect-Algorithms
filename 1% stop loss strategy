# region imports
from AlgorithmImports import *
# endregion

#strategy = take profit with 1% up and take loss with 1% down (SPY)
class FirstCode(QCAlgorithm):

    def Initialize(self):
        self.SetStartDate(2015, 9, 12)  # Set Start Date
        self.SetEndDate(2022, 3, 10)    # Set End Date
        self.SetCash(1000000)  # Set Strategy Cash

        spy = self.AddEquity("SPY", Resolution.Daily)

        spy.SetDataNormalizationMode(DataNormalizationMode.TotalReturn)


        self.spy = spy.Symbol
        self.SetBenchmark("SPY")
        self.SetBrokerageModel(BrokerageName.InteractiveBrokersBrokerage, AccountType.Margin)
        
        self.entryPrice = 0
        self.period = timedelta(1)
        self.nextEntryTime = self.Time


    #OnData -> lets us set historic data and the time frontier
    def OnData(self, data: Slice):
        if not self.spy in data:
            return
        
        price = data.Bars[self.spy].Close
        
        if not self.Portfolio.Invested:
            if self.nextEntryTime <= self.Time:
                self.SetHoldings(self.spy,1)
                self.Log("BUY SPY @"+str(price))

        elif self.entryPrice*1.1 < price or self.entryPrice*0.9 > price:
            self.Liquidate()
            self.Log("SELL SPY @" + str(price))
            self.nextEntryTime = self.Time + self.period 
